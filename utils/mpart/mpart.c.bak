/*
 * Antonio Barbalace, SSRG, Virginia Tech 2012
 */

/*
 * this code partition the memory to be used by mklinux
 * this is part of a set of scripts, prototype code.
 */

// EXTERNAL CREDITS
// most parsing function from
// numactl-2.0.8-rc5.tar.gz/libnuma.c

#define _GNU_SOURCE
#include <string.h>
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <dirent.h>
#include <stdint.h>

#include <bits.h>

static unsigned long long total_by_node=-1;

static long long node_memtotal(int node) { 
	size_t len = 0;
	char *line = NULL;
	long long size = -1;
	FILE *f; 
	char fn[64];

	sprintf(fn,"/sys/devices/system/node/node%d/meminfo", node); 
	f = fopen(fn, "r");
	if(!f)
		return -1; 

	while (getdelim(&line, &len, '\n', f) > 0) { 
		char *end;

		if(strstr(line, "MemTotal")) { 
			char *s = strcasestr(line, "kB"); 
			if(!s) 
				continue; 

			--s; 
			while(s > line && isspace(*s))
				--s;

			while(s > line && isdigit(*s))
				--s; 

			size = strtoull(s,&end,0) << 10; 
			if(end == s) 
				return -1;

			return size;
		}

		free(line);
	} 
	fclose(f); 

	return -1;
}

int hex_to_bin(char ch) {
	if ((ch >= '0') && (ch <= '9'))
		return ch - '0';
	ch = tolower(ch);
	if ((ch >= 'a') && (ch <= 'f'))
		return ch - 'a' + 10;
	return -1;
}

static int node_cpumask(int node, cpu_bitmask_t * cpus) { 
	size_t len = 0;
	char *line = NULL;
	memset(cpus, 0, sizeof(cpu_bitmask_t));

	int digit=0;

	char fn[64];
	sprintf(fn,"/sys/devices/system/node/node%d/cpumap", node); 
	FILE *fp = fopen(fn, "r");
	if(!fp) {
		printf("ERROR ERROR\n");
		return -1; 
	}

	uint32_t* pmap = (uint32_t*)cpus;
	int ret = getdelim(&line, &len, '\n', fp);
	if(ret) {
		char* next = line;
		char temp[11];
		for(int i = MAX_BITMAP_CPUS; i >= 0; --i) {
			char* bitmap = strtok_r(next, ",", &next);
			sprintf(temp, "0x%s", bitmap);
			pmap[i] = strtol(temp, NULL, 16);
		}
		free(line);
	}
__end:
	fclose(fp);
	return 0;

fail:
	fclose(fp);

	return -1;
}

static int numa_configured_cpus(void) {
	return sysconf(_SC_NPROCESSORS_CONF);
}

/*
 * Find nodes (numa_nodes_ptr), nodes with memory (numa_memnode_ptr)
 * and the highest numbered existing node (node_count).
 */

static int node_count = 0;
static int get_node_count(void) {
	int node_count = 0;
	DIR* d = opendir("/sys/devices/system/node");
	if(!d) {
		return 0;
	} else {
		struct dirent *de;
		while((de = readdir(d)) != NULL) {
			if(strncmp(de->d_name, "node", 4))
				continue;

			int nd = strtoul(de->d_name+4, NULL, 0);

			if(node_count < nd)
				node_count = nd;
		}
		closedir(d);
	}

	return node_count + 1;
}




long long maxpresentmem = 0;

typedef struct _memres {
	long long start, end;
} memres;

#define MAX_AMEMRES 64
static int get_system_ram(memres* amemres) {
	int ok = 0;

	FILE* f = fopen("/proc/iomem", "r");
	if(!f)
		return -1; 

	char *line = NULL;
	size_t len = 0;
	int index = 0;
	unsigned long long total = 0;
	while(getdelim(&line, &len, '\n', f) > 0) { 
		char *endptr;
		char *s = strcasestr(line, "System RAM"); 
		if (!s) 
			continue; 

		char* arange = strtok(line, " ");
		char* next;

		unsigned long long start = strtoull(arange, &next, 16);
		unsigned long long end = strtoull(next + 1, NULL, 16);

		total += (end + 1) - start;

		amemres[index].start = start; 
		amemres[index].end = end;
		printf("Start 0x%llx End 0x%llx Amount %llu Bytes (%llu MB)\n", start, end, (end + 1) - start, (end - start) >> 20);
		index++;
	} 
	free(line);
	fclose(f); 
	printf("Total Mem: %llu Bytes (%llu MB)\n", total, total >>20);

	maxpresentmem = total;	
	return index;
}

typedef struct _numa_node{
	long long start, end; //physical start and end
	long long size; // numa memory size 
	memres * rstart, * rend; //pointer to start, end resource area
	cpu_bitmask_t map; // map of the cpus
	int cpus;
} numa_node;
//allocation is done in reverse order (hopefully is correct per node)

///////////////////////////////////////////////////////////////////////////////
// policies
///////////////////////////////////////////////////////////////////////////////

/* RESULTION is 2MB 0x200000 */
#define RESOLUTION_MASK ((1 << 21) -1)
int partitionedcpu_globalshm ( numa_node * list, memres* amemres)
{

	//do the partition per node

	//long long reserved_cap = (0x10 << 20);   //use 16MB reservation at the beginning
	long long reserved_cap = (0x1 << 20);   //use 1MB reservation at the beginning

	// 512 MB
#define BEN_ALIGNMENT 0x20000000 
#ifdef BEN_ALIGNMENT
	printf ("Ben ALIGNMENT memmap=x@ALIGNED buond %lld\n", (long long) BEN_ALIGNMENT);
#endif


	//  better idea just allocate from 0 to.. ?!?!
	// algorithm is: if over 16MB 
	int i, l;

	printf("##### %s #####\n", __func__);

	for (i=0 ; i  < (node_count +1) ; i++) {
		int cpu_num = list[i].cpus;
		long long size = list[i].size; //which size is it? total or avail?
		if (cpu_num == 0) {
			printf("i %d cpu_num %d\n",i , cpu_num );
			return -1;
		}
		long long chunk = size / cpu_num;
		long long alignedchunk =  chunk & ~RESOLUTION_MASK;
		long long new_total = alignedchunk * cpu_num;
		long long diff = size -new_total;
		long long start = -1;

		if (list[i].rstart == list[i].rend) {
			/// THIS NODE DOES NOT HAVE ANY HOLES IN ITS MAP -------------------------
			start =  list[i].start;
			cpu_bitmask_t mask = list[i].map;
			for (l=0; l<cpu_num; l++) {
				int ccpu = ffsll_bitmask(&mask) -1;

#ifdef BEN_ALIGNMENT
				if ( (start & (unsigned long long)~((unsigned long long)BEN_ALIGNMENT -1)) ) {
					start &= (unsigned long long)~((unsigned long long)BEN_ALIGNMENT -1);
					start += BEN_ALIGNMENT;
				}
#endif
				printf ("present_mask=%d memmap=%ldM$%ldM mem=%ldM\n",
						ccpu,
						(unsigned long)(start - reserved_cap) >> 20, (unsigned long)reserved_cap >> 20,
						(unsigned long)(start + alignedchunk) >> 20
				       );
				start += alignedchunk;

				clearcpu_bitmask(&mask, ccpu);
			}
		}
		else {
			/// THIS NODE DOES HAVE HOLES SO MUST BE SPECIALLY HANDLED --------------
			cpu_bitmask_t mask = list[i].map;
			memres * smemres = list[i].rstart;
			start = smemres->start;

#define START_AFTER_CAP      
#ifdef START_AFTER_CAP
			//contains reserved_cap?
			while ( smemres->start < reserved_cap ) {
				if (smemres->end < reserved_cap) { // the hole is inside the cap
					smemres += 1;
					start = smemres->start;
					continue;
				}
				start = reserved_cap;
				break;
			}
#endif 

#define BSP_SPECIAL_HANDLING
#ifdef BSP_SPECIAL_HANDLING
			{
				int ccpu = ffsll_bitmask(&mask) -1;
				if (ccpu == 0) {
					//consider the cap has part of the BSP memory
					memres * pamem = amemres;
					long long end = 0;
					long long total_to_sum = 0;
					//sum up all holes to the cap
					while ( pamem != smemres ) {
						total_to_sum += (pamem->start - end);
						end = pamem->end;
						pamem++;
					}
					total_to_sum += (pamem->start - end);

					printf("cpu %d sum of hole mem before the cap %lld %llx\n", ccpu, total_to_sum, total_to_sum);
					//This memory will be added to the total available to obtain the perfect chunk size in order to allocate the first 16MB
					size += total_to_sum;
					// recalculate the size
					alignedchunk =  chunk & ~RESOLUTION_MASK;
					new_total = alignedchunk * cpu_num;
					diff = size -new_total;
					start = 0;
				} 
			}
#endif

			for (l=0; l<cpu_num; l++) {
				int ccpu = ffsll_bitmask(&mask) -1;

#ifdef BEN_ALIGNMENT
				if ( (start & (unsigned long long)~((unsigned long long)BEN_ALIGNMENT -1)) ) {
					start &= (unsigned long long)~((unsigned long long)BEN_ALIGNMENT -1);
					start += BEN_ALIGNMENT;
				}
#endif

				long long endend = start + alignedchunk;
				long long avail = (smemres->end - start);
				long long required = alignedchunk, total = alignedchunk;
				//hole handling code
				while ( avail < required ) {
					//switch to next resource
					total += (smemres +1)->start - smemres->end;
					smemres += 1;
					required -= avail;
					avail = smemres->end - smemres->start;
					endend = smemres->start + required;
				}

#ifdef BSP_SPECIAL_HANDLING
				if (ccpu == 0)
					printf ("present_mask=%d mem=%ldM\n",
							ccpu,
							(unsigned long)(endend) >> 20
					       );
				else
#endif
					printf ("present_mask=%d memmap=%ldM$%ldM mem=%ldM\n",
							ccpu,
							(unsigned long)(start - reserved_cap) >> 20, (unsigned long)reserved_cap >> 20,
							(unsigned long)(endend) >> 20
					       );
				start = endend;

				clearcpu_bitmask(&mask, ccpu);
			}

		}
	}
	return 1;
}

//static int partitionedcpu_globalshm_nonodes( numa_node * list, memres* amemres) {
//
//#define COM_RESERVOIR  
//#ifdef COM_RESERVOIR
//#define MACH_64CORE_RESERV 0x00000000
//	long long reserved_com = (0x40 << 20) + MACH_64CORE_RESERV; // 64MB for application communication (Arijit)
//#endif
//
//	//do the partition without caring about nodes
//	//long long reserved_cap = (0x10 << 20);   //use 16MB reservation at the beginning
//	long long reserved_cap = (0x1 << 20);   //use 1MB reservation at the beginning
//	int cpu_num = numa_configured_cpus();
//	//  int size = maxpresentmem;
//	unsigned long long  size = total_by_node;
//
//	// we do not care about nodes here
//	memres * smemres = amemres;
//	long long start = smemres->start;
//
//	printf("##### %s #####\n", __func__);
//
//	//contains reserved_cap?
//	while ( smemres->start < reserved_cap ) {
//		if (smemres->end < reserved_cap) { // the hole is inside the cap
//			smemres += 1;
//			start = smemres->start;
//			continue;
//		}
//		start = reserved_cap;
//		break;
//	}
//
//	// first cpu we consider is always zero
//	//consider the cap has part of the BSP memory
//	memres * pamem = amemres;
//	long long end = 0;
//	long long total_to_sum = 0;
//	//sum up all holes to the cap
//	while ( pamem != smemres ) {
//		total_to_sum += (pamem->start - end);
//		end = pamem->end;
//		pamem++;
//	}
//	total_to_sum += (pamem->start - end);
//
//	printf("NONODES cpu %d sum of hole mem before the cap %lld %llx\n", cpu_num, total_to_sum, total_to_sum);
//	//This memory will be added to the total available to obtain the perfect chunk size in order to allocate the first 16MB
//	size += total_to_sum;
//
//	unsigned long long chunk = 0;
//	unsigned long long alignedchunk =0;
//	long long new_total = -1;
//
//	//#define BEN_ALIGN_CHUNK 0x40000000
//#define BEN_ALIGN_CHUNK 0x8000000
//#ifdef BEN_ALIGN_CHUNK 
//	//this must run on the available memory: a lot of memory will be lost because of these alignments
//	unsigned long chunky_num = size /(unsigned long long) BEN_ALIGN_CHUNK;
//	unsigned long chunky_per_cpu = chunky_num / cpu_num;
//	printf("chunkys num = %ld integer chunks per cpu = %ld wasted chunks = %ld\n",
//			chunky_num, chunky_per_cpu, (chunky_num - (chunky_per_cpu * cpu_num)) );
//
//	chunk = (unsigned long long)chunky_per_cpu * (unsigned long long)BEN_ALIGN_CHUNK;
//	alignedchunk =  chunk & ~RESOLUTION_MASK;
//	new_total = alignedchunk * cpu_num;
//#else 
//	// total size divided by the number of cpu
//	chunk = size / cpu_num; 
//	// recalculate the size
//	alignedchunk =  chunk & ~RESOLUTION_MASK;
//	new_total = alignedchunk * cpu_num;
//#endif
//
//#ifdef COM_RESERVOIR
//	size -= reserved_com;
//#endif
//
//	long long diff = size -new_total;
//	start = 0;
//
//	printf("cpus: %d last address 0x%llx avail memory: 0x%llx (mem lost 0x%llx) chunks %llx aligned %llx\n",
//			cpu_num , list[node_count].end->end, size,
//			list[node_count].end->end - size,
//			chunk, alignedchunk
//	      );
//
//#ifdef BEN_ALIGN_CHUNK
//	{
//		//realign in Ben's required fashion all the memory, i.e. chunks of 512MB, so rewrite the memory map
//		// start to ceil, end to floor
//		memres * a = smemres;
//		while ((a->start != 0) && (a->end !=0)) {
//			printf("REALIGN MEM WAS: 0x%llx - 0x%llx *** ", a->start, a->end);
//			if ( (a->start > reserved_cap ) && (a->start & (BEN_ALIGN_CHUNK -1)) ) { // ceil
//				a->start &= ~(BEN_ALIGN_CHUNK -1);
//				a->start += BEN_ALIGN_CHUNK;
//			}
//			if ( (a->end & (BEN_ALIGN_CHUNK -1)) ) { // floor
//				a->end &= ~(BEN_ALIGN_CHUNK -1);
//			}
//			printf("REALIGN MEM  IS: 0x%llx - 0x%llx\n", a->start, a->end);
//			a++;
//		}
//	}
//#endif
//
//	int l;
//	for (l=0; l<cpu_num; l++) {
//
//		long long endend = start + alignedchunk;
//		long long avail = (smemres->end - start);
//		long long required = alignedchunk, total = alignedchunk;
//		//hole handling code
//		while ( avail < required ) {
//			//switch to next resource
//			total += (smemres +1)->start - smemres->end;
//			smemres += 1;
//			required -= avail;
//			avail = smemres->end - smemres->start;
//			endend = smemres->start + required;
//		}
//		// in this policy BSP must be special handled
//
//		// #ifdef COM_RESERVOIR
//		// 	printf("vty_offset=0x%llx ", (list[node_count].rend->end - reserved_com) );
//		// #endif
//		if (l == 0)
//			printf ("present_mask=%d mem=%ldM\n",
//					l,
//					(unsigned long)(endend) >> 20
//			       );
//		else
//			printf ("present_mask=%d memmap=%ldM$%ldM mem=%ldM\n",
//					l,
//					(unsigned long)(start - reserved_cap) >> 20, (unsigned long)reserved_cap >> 20,
//					(unsigned long)(endend) >> 20
//			       );
//
//		start = endend;
//	}
//
//	return 1;
//}

// clustered around the nodes
// int clusteredcpu_on_nodes ( numa_node * list)
// {
// 
// #define COM_RESERVOIR  
// #ifdef COM_RESERVOIR
// // #define MACH_64CORE_RESERV 0x70000000
// 	long long reserved_com = (0x40 << 20) + MACH_64CORE_RESERV; // 64MB for application communication (Arijit)
// #endif
// 
// 
// 	//do the partition per cluster
// 	// instead of asking the cluster size (that can be done in the future if required..)
// 	// we just need to get the cpu per node and cluster on them,
// 
// 	long long reserved_cap = (0x1 << 20);   //use 16MB reservation at the beginning
// 
// 	// 512 MB
// #define BEN_ALIGNMENT 0x20000000
// #ifdef BEN_ALIGNMENT
// 	printf ("CLUSTERED Ben ALIGNMENT memmap=x@ALIGNED buond %lld\n", (long long) BEN_ALIGNMENT);
// #endif
// 	// 	printf("vty_offset not fully supported: NOT ALL CLUSTERS WILL WORK\n");
// 	printf("##### %s #####\n", __func__);
// 
// 	// algorithm is: if over 16MB
// 	int i, id_base =0;
// 	long long start =0;
// 
// 	for (i=0 ; i  < (node_count +1) ; i++) {
// 		int cpu_num = list[i].cpus;
// 		if (cpu_num == 0) {
// 			printf("ERROR i %d cpu_num %d\n",i , cpu_num );
// 			return -1;
// 		}
// 
// 		long long chunk = list[i].size;
// 		long long alignedchunk =  chunk & ~RESOLUTION_MASK;
// 		//		long long diff = size -new_total;
// 		long long start = list[i].start;
// 
// 		// #ifdef COM_RESERVOIR
// 		// 	printf("vty_offset=0x%llx ", (list[node_count].rend->end - reserved_com) );
// 		// #endif
// 		if (start < reserved_cap) { // include reserved cap
// 			printf ("present_mask=%d-%d mem=%ldM\n",
// 					id_base, id_base + (cpu_num -1),
// 					(unsigned long)(alignedchunk) >> 20);
// 		} else {
// 			printf ("present_mask=%d-%d memmap=%ldM$%ldM mem=%ldM\n",
// 					id_base, id_base + (cpu_num -1),
// 					(unsigned long)(start - reserved_cap) >> 20, (unsigned long)reserved_cap >> 20,
// 					(unsigned long)(start + alignedchunk) >> 20);
// 		}
// 
// 		id_base += cpu_num;
// 	}
// 	return 1;
// }


///////////////////////////////////////////////////////////////////////////////
// main
///////////////////////////////////////////////////////////////////////////////

int main(int argc, char* argv[])
{ 
	int node_count = get_node_count(); //calculate node count
	printf("configured nodes %d cpus %d\n", (node_count), (numa_configured_cpus()));

	memres amemres[MAX_AMEMRES];
	memset(amemres, 0, sizeof(memres) * MAX_AMEMRES);
	int im= get_system_ram(amemres);
	printf("\n");

	numa_node* anode = malloc(sizeof(numa_node) * (node_count));
	if (!anode) {
		printf("malloc returned zero exit\n");
		return -1;
	}
	memset(anode, 0, (sizeof(numa_node) * (node_count)));
	unsigned long long total = 0, cmap = 0;
	for(int i = 0; i < node_count; i++) {
		anode[i].size = node_memtotal(i);
		//TODO check -1
		node_cpumask(i, &(anode[i].map));
		anode[i].cpus = bit_weight_bitmask(&(anode[i].map)); //number of cpus
		//TODO check -1
		total += anode[i].size;
		printf("node %d mem %lld %llx map TODOllx (%d core)\n",
				i, anode[i].size, anode[i].size, anode[i].cpus);
	}

	printf ("total = %lld %lld kB %lld MB %lld GB\n\n", total, total >>10, total >>20, total >>30);
	total_by_node = total; //unsigned long long total_by_node=-1;

//	unsigned long long last = amemres[im - 1].end;
//	unsigned long long nlast;
//	printf("total memory hole %llu B %llu kB\n\n", (last - total), (last - total) >> 10);

//	int k = 0;
//	unsigned long long start = amemres[0].start;
//	//unsigned long long last = amemres[im].end;
//	for(int i = 0; i < node_count; i++) {
//		anode[i].start = start;
//		//anode[i].end = last;
//		//anode[i].rend = &(amemres[im]);
//
//		while((amemres[k].end - amemres[k].start) < size) {
//			unsigned long long avail = amemres[k].end - amemres[k].start;
//			printf("hole is present on these node - PREV start %llx last %llx avail %llu (%llu kB) CURR end %llx start %llx\n",
//					amemres[im].start, last, avail, (avail >> 10), amemres[(im -1)].end, amemres[(im -1)].start);
//			size -= avail;
//			k++;
//		}
//
//		nlast = last - size;
//		anode[i].start = nlast;
//
//		anode[i].rstart = &(amemres[im]);
//
//		printf("node %d mem %lld %llx - start %llx (%lldMB) end %llx (size %llu)\n",
//				i, anode[i].size, anode[i].size, anode[i].start, anode[i].start >> 20, anode[i].end, ( anode[i].end - anode[i].start));
//		last = nlast;    
//	}

	// the following is outputted from linu/arch/x86/mm/numa.c in  setup_node_data
//	printf("\n\nCROSSCHECK for consistency with\n"
//			"dmesg | grep NODE_DATA\n"
//			"dmesg | grep \"Initmem setup node\"\n\n");

	// precheck - we cannot have more then num_cpu partitions -p   

	// here the memory allocator has to run , different memory allocators can be written
	// policy 0: how many partitions? 1, #proc or how many?!
	// policy 1: number of processor (everyone or subset)

	// policy 2: single shared memory area, (fixed)
	// policy 3: per node shared memory memory area in mklinux

	// policy 4: 

	// partitionedcpu_globalshm( anode);
//	partitionedcpu_globalshm_nonodes (anode);
	// clusteredcpu_on_nodes(anode);

	free(anode);

	return 0;
}
