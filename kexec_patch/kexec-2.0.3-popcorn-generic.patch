diff --git a/kexec/kexec-elf-exec.c b/kexec/kexec-elf-exec.c
index cb62d04..0e9c360 100644
--- a/kexec/kexec-elf-exec.c
+++ b/kexec/kexec-elf-exec.c
@@ -8,6 +8,12 @@
 #include <boot/elf_boot.h>
 #include "kexec.h"
 #include "kexec-elf.h"
+#include <sys/mman.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
+extern unsigned long mklinux_load_addr;
 
 static const int probe_debug = 0;
 
@@ -70,6 +76,9 @@ int elf_exec_load(struct mem_ehdr *ehdr, struct kexec_info *info)
 		first = ULONG_MAX;
 		last  = 0;
 		align = 0;
+		
+		printf("Dynamic executable!\n");
+
 		for(i = 0; i < ehdr->e_phnum; i++) {
 			unsigned long start, stop;
 			struct mem_phdr *phdr;
@@ -112,10 +121,27 @@ int elf_exec_load(struct mem_ehdr *ehdr, struct kexec_info *info)
 
 	}
 
+	printf("base = 0x%lx\n", base);
+
+	int mem_fd, mem_offset = (mklinux_load_addr - 0x100000);
+	void * kernel_base_addr;
+
+	mem_fd = open("/dev/mem", O_RDWR | O_SYNC);
+
+	printf("Opened /dev/mem, fd %d\n", mem_fd);
+
+	kernel_base_addr = mmap(0, 0x1400000, PROT_READ | PROT_WRITE, MAP_SHARED, mem_fd, mklinux_load_addr);
+
+	printf("Loading kernel at phys addr 0x%lx, mapped addr 0x%lx\n", 
+			mklinux_load_addr, kernel_base_addr);
+
+	
+
 	/* Read in the PT_LOAD segments */
 	for(i = 0; i < ehdr->e_phnum; i++) {
 		struct mem_phdr *phdr;
 		size_t size;
+		void * addr_to_copy;
 		phdr = &ehdr->e_phdr[i];
 		if (phdr->p_type != PT_LOAD) {
 			continue;
@@ -124,6 +150,17 @@ int elf_exec_load(struct mem_ehdr *ehdr, struct kexec_info *info)
 		if (size > phdr->p_memsz) {
 			size = phdr->p_memsz;
 		}
+
+		printf("Adding PT_LOAD segment %d, size 0x%lx, start 0x%lx\n, address 0x%lx\n", i, size, phdr->p_data, phdr->p_paddr + base);
+
+		addr_to_copy = kernel_base_addr + phdr->p_paddr - 0x1000000;
+
+		printf("addr_to_copy: 0x%lx\n", addr_to_copy);
+
+		memcpy(addr_to_copy, phdr->p_data, size);
+
+		printf("Memcopied segment!\n");
+
 		add_segment(info,
 			phdr->p_data, size,
 			phdr->p_paddr + base, phdr->p_memsz);
diff --git a/kexec/kexec.c b/kexec/kexec.c
index d2d05a8..86194d9 100644
--- a/kexec/kexec.c
+++ b/kexec/kexec.c
@@ -51,6 +51,7 @@ unsigned long long mem_min = 0;
 unsigned long long mem_max = ULONG_MAX;
 static unsigned long kexec_flags = 0;
 int kexec_debug = 0;
+unsigned long mklinux_load_addr = 0x0;
 
 void die(char *fmt, ...)
 {
@@ -368,6 +369,8 @@ unsigned long add_buffer_phys_virt(struct kexec_info *info,
 	if (base == ULONG_MAX) {
 		die("locate_hole failed\n");
 	}
+
+	dbgprintf("Located hole, base = 0x%lx\n", base);
 	
 	add_segment_phys_virt(info, buf, bufsz, base, memsz, phys);
 	return base;
@@ -829,6 +832,14 @@ static int my_exec(void)
 	return -1;
 }
 
+static int my_boot(int cpuid, unsigned long boot_addr)
+{
+	printf("KEXEC: called my_boot, cpu %d, boot_addr 0x%lx\n", cpuid, boot_addr);
+	kexec_boot(cpuid, boot_addr);
+	fprintf(stderr, "kexec boot done\n");
+	return 0;
+}
+
 static int kexec_loaded(void);
 
 static int load_jump_back_helper_image(unsigned long kexec_flags, void *entry)
@@ -889,6 +900,10 @@ void usage(void)
 	       "                       specified)\n"
 	       " -l, --load           Load the new kernel into the\n"
 	       "                      current kernel.\n"
+	       " -a  --address=<addr> Load the new kernel to the specified physical\n"
+	       "                      address, or boot the new kernel at the specified\n"
+	       "                      physical address.\n"
+	       " -b, --boot=<cpu>     Boot the secondary kernel on the specified CPU\n"
 	       " -p, --load-panic     Load the new kernel for use on panic.\n"
 	       " -u, --unload         Unload the current kexec target kernel.\n"
 	       "                      If capture kernel is being unloaded\n"
@@ -1050,6 +1065,9 @@ int main(int argc, char *argv[])
 {
 	int do_load = 1;
 	int do_exec = 0;
+	int do_boot = 0;
+	int cpuid = 0;
+	unsigned long boot_addr = 0x0;
 	int do_load_jump_back_helper = 0;
 	int do_shutdown = 1;
 	int do_sync = 1;
@@ -1144,6 +1162,32 @@ int main(int argc, char *argv[])
 			do_sync = 0;
 			kexec_flags = KEXEC_ON_CRASH;
 			break;
+		case OPT_BOOT_ADDR:
+			printf("KEXEC: picked OPT_BOOT_ADDR\n");
+			boot_addr = strtoul(optarg, &endptr, 0);
+			mklinux_load_addr = boot_addr;
+			printf("KEXEC: boot address is 0x%lx\n", boot_addr);
+			if (*endptr) {
+				fprintf(stderr, "Bad option value in --address=%s\n", optarg);
+				usage();
+				return 1;
+			}
+			break;
+		case OPT_BOOT:
+			printf("KEXEC: picked OPT_BOOT\n");
+			do_load = 0;
+			do_exec = 0;
+			do_shutdown = 0;
+			do_sync = 0;
+			do_boot = 1;
+			cpuid = strtoul(optarg, &endptr, 0);
+			printf("KEXEC: cpu id is 0x%d\n", cpuid);
+			if (*endptr) {
+				fprintf(stderr, "Bad option value in --boot=%s\n", optarg);
+				usage();
+				return 1;
+			}
+			break;
 		case OPT_MEM_MIN:
 			mem_min = strtoul(optarg, &endptr, 0);
 			if (*endptr) {
@@ -1192,6 +1236,7 @@ int main(int argc, char *argv[])
 	optind = 1;
 
 	result = arch_process_options(argc, argv);
+	printf("result = %d\n", result);
 
 	/* Check for bogus options */
 	if (!do_load) {
@@ -1234,6 +1279,10 @@ int main(int argc, char *argv[])
 	if ((result == 0) && do_load_jump_back_helper) {
 		result = my_load_jump_back_helper(kexec_flags, entry);
 	}
+	if ((result == 0) && do_boot) {
+		printf("KEXEC: do_boot on cpuid %d\n", cpuid);
+		result = my_boot(cpuid, boot_addr);
+	}
 
 	fflush(stdout);
 	fflush(stderr);
diff --git a/kexec/kexec.h b/kexec/kexec.h
index 279dfdf..a612da1 100644
--- a/kexec/kexec.h
+++ b/kexec/kexec.h
@@ -184,6 +184,8 @@ extern int file_types;
 #define OPT_FORCE		'f'
 #define OPT_NOIFDOWN		'x'
 #define OPT_EXEC		'e'
+#define OPT_BOOT                'b'
+#define OPT_BOOT_ADDR           'a'
 #define OPT_LOAD		'l'
 #define OPT_UNLOAD		'u'
 #define OPT_TYPE		't'
@@ -207,13 +209,15 @@ extern int file_types;
 	{ "load-jump-back-helper", 0, 0, OPT_LOAD_JUMP_BACK_HELPER }, \
 	{ "entry",		1, 0, OPT_ENTRY }, \
 	{ "type",		1, 0, OPT_TYPE }, \
+	{ "address",            1, 0, OPT_BOOT_ADDR}, \
+	{ "boot",               1, 0, OPT_BOOT}, \
 	{ "load-panic",         0, 0, OPT_PANIC }, \
 	{ "mem-min",		1, 0, OPT_MEM_MIN }, \
 	{ "mem-max",		1, 0, OPT_MEM_MAX }, \
 	{ "reuseinitrd",	0, 0, OPT_REUSE_INITRD }, \
 	{ "debug",		0, 0, OPT_DEBUG }, \
 
-#define KEXEC_OPT_STR "hvdfxluet:p"
+#define KEXEC_OPT_STR "hvdfxluet:a:b:p"
 
 extern void die(char *fmt, ...);
 extern void *xmalloc(size_t size);